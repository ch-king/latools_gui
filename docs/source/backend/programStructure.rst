#################################
Program Structure
#################################

The LAtools GUI program is run from latoolsgui.py. This module contains the MainWindow class which is instantiated
and shown when the program is run and is what houses and manages the rest of the programs functionality. From
the MainWindow's initialisation, the core layout and structure of the GUI is defined as templates and stages
are instantiated. The GUI itself is comprised of many PyQt box layouts and widgets nested within one another
to create the desired appearance. Templates provide specific designs for individual blocks of the interface,
such as the graphPane at the bottom.

The various stage layouts are instantiated as members of a list which can be iterated over as the LAtools process
requires. The stageTabs and progressPane templates are then built and used for navigating within this list. The
format of each individual stage is stored in a separate module which defines how each given stage will make use of
the controlsPane, which is the rectangular box which occupies the top half of the GUI during runtime. Each stage has
a unique set of controls which provide an interface to the parameters of functions within the LAtools package.

The core analytical information generated by LAtools as data is imported and processed is stored within a
runningProject object which is instantiated in the MainWindow. The attribute *eg* is an instantiation of the *analyse*
class within the LAtools package which imports the data and contains methods for manipulating it. Stages within the
LAtools GUI call the methods of *eg* through the runningProject.

Also within the main module latoolsgui.py is the ImportListener class which is instantiated by the MainWindow. This
class is used for managing communications between various modules during runtime.

The graphPane is a constant factor through the LAtools GUI process, displayed in the bottom half of the screen. It
takes the runningProject as a parameter on initialisation so that it can read and write analytical data. Typically
the individual stages apply their own functions to the runningProject, however the graphPane also makes use of it for
graphing and display purposes. The graphPane is broken into a few sections, and the module is responsible for all
graphing functionality within the program.